name: run-gatling
  # description: Runs a Gatling test suite
on:
  workflow_call:
    inputs:
      javaVersion:
        description: "Java version to use"
        default: "11.0.19"
        type: string
      javaDistribution:
        description: "Java distribution to use"
        default: "microsoft"
        type: string
      simulationClass:
        description: "The fully qualified name of the simulation to run (e.g. com.proxibid.MySimulation)"
        required: true
        type: string
      service_url:
        description: "The http service to run against"
        required: true
        type: string
jobs:
  load_tests:
    runs-on: stage-arc-runner-set
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Execute Gatling Test Suite      
        uses: actions/setup-java@v3
        with:
          distribution: ${{ inputs.javaDistribution }}
          java-version: ${{ inputs.javaVersion }}

      - run: chmod +x ./gradlew && ./gradlew gatlingRun-${{inputs.simulationClass}}
        shell: bash
        env:
          BASE_URL: ${{ inputs.service_url }}
      - name: Archive test results
        uses: actions/upload-artifact@v3
        with:
          name: gatling-reports
          path: build/reports/gatling/smoketest-*/index.html
      - name: Generate Job Summary 
        uses: actions/github-script@v6
        env:
          TEST_PATH: ${{ inputs.pomPath }}
        with:
          script: |
            const fs = require('fs')
            const pomPath = process.env.TEST_PATH
            const lastRuns = fs.readFileSync(`${pomPath}/target/gatling/lastRun.txt`).toString().trim().split('\n');

            for(const run of lastRuns) {
                const results = JSON.parse(fs.readFileSync(`${pomPath}/target/gatling/${run}/js/stats.json`).toString());
                let tableContent = [
                    [
                        {data: 'Request', header: true}, 
                        {data: 'Success ✅', header: true}, 
                        {data: 'Errors ❌', header: true}, 
                        {data: 'Min', header: true},
                        {data: 'Max', header: true},
                        {data: 'Avg.', header: true},
                        {data: 'Std. Dev.', header: true},
                        {data: 'RPS', header: true},
                    ]
                ];
                
                for(const result in results.contents) {
                    const requestMetrics = results.contents[result].stats;
                    tableContent.push([
                        requestMetrics.name,
                        requestMetrics.numberOfRequests.ok.toString(),
                        requestMetrics.numberOfRequests.ko.toString(),
                        requestMetrics.minResponseTime.total.toString(),
                        requestMetrics.maxResponseTime.total.toString(),
                        requestMetrics.meanResponseTime.total.toString(),
                        requestMetrics.standardDeviation.total.toString(),
                        requestMetrics.meanNumberOfRequestsPerSecond.total.toString(),
                    ]);
                }

                await core.summary
                    .addHeading(`Results for ${run}`)
                    .addTable(tableContent)
                    .addQuote('All times are in millisecond (ms). RPS means "Requests per Second"')
                    .write()
            }
